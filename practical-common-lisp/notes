= Ch 2 REPL

* self-evaluating object
when given to the evaluator, evaluates to itself. Examples: 8, nil
--
* format
easiest way is with (format t "string"). Required arguments:
place to send output and string.
--
Load a file with (load (compile-file "scratch.lisp")) to first
create a FASL (fast load) file.
--

h2. Ch 3 A Simple Database


* Property list
every other element is a symbol that describes what the next element
in the list is. Ex: (list :a 1 :b 2 :c 3)
---
Use GETF to get a value for a symbol
Ex: (getf (list :a 1 :b 2 :c 3) :a) ; 1
---
DEFVAR defines a global variable. Will not run if variable is
already created and initialized. DEFPARAMETER reinitializes.
---
PUSH add items to a list
---
DOLIST loop for each element of a list, binding element to variable.
Like ruby's each.

Ex: (dolist (yarg (list 1 2 3)) ;do whatever to yarg)
This will assign 1, 2, and 3 to yarg
---
* FORMAT
~a : aesthetic. strings w/o quotes, symbols without colons

~t : tabulating. ~10t emit enough spaces to move to the tenth
column before processing the next ~a. Doesn't consume args

~{ : the next argument must be a list. Loops over list, processing
the directives between the braces.

~% : emit newline
---
Y-OR-N-P - requires input of Y y N or n
---
WITH-OPEN-FILE opens file, binds the stream to a variable, executes
a set of expressions, and then closes the file.
---
PRINT outputs in lisp format
---
WITH-STANDARD-IO-SYNTAX ensures that certain variables that affect
the behavior of PRINT are set to their standard values
---
REMOVE-IF-NOT like ruby's reject
---
* Keyword parameters
Example: (defun foo (&key a (b 20) (c 30 c-p)) (list a b c c-p))
when called:
(foo :a 1 :b 2 :c 3) -> (1 2 3 T)
(foo :a 1 :c 3) -> (1 20 3 T)
(foo) -> (NIL 20 30 NIL)

When giving a list to a keyword argument, the first item is the
name, second default value, third t/f on whether argument was
actually passed

= Slime

* C-c C-c : compile function
* C-c C-l : slime-load-file. Prompts for name of file to load
* C-c C-k : compile and load file represented by current buffer
* When you get an error, you're put in a debugging buffer. Type 'q' to
  quit 

= Ch 5 Functions

* Parameter forms
(defun foo (a b c &optional d)
  ;; a b c required
  (list a b c d))

(defun foo (a b c &optional (d 10))
  ;; d is optional, default is 10
  (list a b c d))

(defun foo (a b c &rest r)
  ;; r is a list of all the remaining arguments
  (list a b c r))
  
---
#' is syntactic sugar for FUNCTION

Example:

(defun foo() )
(function foo)
-> #<Interpreted Function FOO>

#'foo
#<Interpreted Function FOO>
++

Why does FUNCTION work on both function names and lambdas? I guess foo
evaluates to the actual function object? But I don't think "evaluates"
is the right word.
--
Footnote on p13 - "lambda" is actually a macro which expands to
(function (lambda () blah blah))
---
When you have a function object, you can invoke it with FUNCALL or
APPLY. Use FUNCALL when you know the number of arguments you're going
to pass to the function.

(foo 1 2 3) == (funcall #'foo 1 2 3)
---
A function definition is itself another list of symbols
---


h2. Macros

(defmacro when (condition &rest body)
  `(if ,condition (progn ,@body)))

the "@" splices the value of the expression, which must be a list,
into the enclosing list.

For example:
`(and ,(list 1 2 3)) -> (AND (1 2 3))
`(and ,@(list 1 2 3)) -> (AND 1 2 3)

So in the macro above, "body" is now a list containing everything that
comes after the condition. So in the following:

(when (> 3 2)
  (printf t "one")
  (printf t "two"))

"body" is the following list:
((printf t "one") (printf t "two"))

using "@" unwraps the list for macro expansion
---

h2. Basics

What exactly is a form? Is 7 a form? Is any self-evaluating expression
a form? Or does a form have to be a list?
---
What's the relationship between names and functions?
---

